CX_props_eventdisplays_text.txt
  CalendarX 0.6.6(stable)  January 03 2006
  (last modified for CalendarX 0.6.1)
by +lupa+ (lupaz on sf.net, lupa at zurven dot com)
Released under the GPL (see LICENSE.txt)

Instructions for properties in CX_props_eventdisplays.

Use the Properties tab to adjust the attributes of the Event as displayed 
  on the calendar views.  These properties control the icons available for
  display and also the CSS classes.  You can choose to control icons and 
  CSS classes according to the Subject of the Event, or according to the 
  Type of the Event.  
  
=== List of Attributes ===
title   string   
  Leave this title attribute alone.

useSubjectIcons   boolean
listOfSubjectIcons   lines
  If checked, this will cause the views to choose an icon for each event
    based on the Subject names found in the list.  The list consists of a lines
    attribute where each line consists of a Subject and an icon ID, separated
    by a pipe ( | ) character.  For example: 

       Work|event_work_icon.gif      where Work is the subject.

    Your subject names should (must!) match the actual subjects you use for 
    your events, or this method will not work well.  Actually, it will just 
    pull the default event_icon.gif from the Plone skin if there is any 
    problem finding a matching subject name or icon ID.

    This property is handy for making your events more visibly recognizable in 
    your calendar page.  The default icon size is 16x16 pixels, with some 
    white (or clear) pixel space on the right and left sides.  I haven't tested  
    it with larger icons, but keeping to a modest size might be a good idea.

    Add your event icons into your /portal_skins/custom folder, or put them
    directly into your calendar instance folder for (slightly) better 
    performance.


useSubjectCSSClasses   boolean
listOfSubjectCSSClasses   lines
  If checked, this will cause the views to choose a CSS class for each event
    based on the Subject names found in the list.  The list consists of a lines
    attribute where each line consists of a Subject and a CSS class name, 
    separated by a pipe ( | ) character.  For example: 
    
       US Holiday|event_usholiday    where Work is the subject, and 
                                     event_usholiday is the CSS class name.

    Your subject names should (must!) match the actual subjects you use for 
    your events, or this method will not work well.  Actually, it will just 
    pull the default event_published CSS class from the Plone skin if there is 
    any problem finding a matching subject name or icon ID.

    This nicely allows you to apply styles like font color to your event 
    listings according to the Subject of the event.  Put your custom styles 
    into your calendar.css stylesheet, or into a customized version of the
    ploneCustom.css stylesheet if you prefer (the sample ones I've created for
    default use are found in calendar.css).  An example of a CSS class listing 
    I used to use a blue text color for the "Appointment" event subject: 
    
A.event_appointment {
    COLOR: #0000CC;
    TEXT-DECORATION: none;
}
A.event_appointment:hover {
    COLOR: #0000FF;
    TEXT-DECORATION: none;
}

    Additionally, if you want the Subjects in the Subject listing at the top of 
    the calendar to reflect these same CSS classes, you have to add these too.
    Example ones (for Appointment, etc.) are in calendar.css for you to 
    customize.  They are in a SPAN tag and look like this:

TABLE.caltabs TD.barright2 SPAN.event_appointment {
    COLOR: #0000CC;
    TEXT-DECORATION: none;
}


    *** ONE MORE NOTE about these.  Make sure in your listOfSubjectCSSClasses 
    and listOfSubjectIcons lines properties that you use the actual SUBJECT 
    name and not any Subject nicknames you might use for display (as defined 
    in the listOfSubjectTitles property in CX_props_calendar.  Those labels 
    won't work here, only the actual subject will work.
    

    *** AND ONE MORE NOTE.  The following two properties (useEventTypeIcons
    and useEventTypeCSSClasses) take precedence over useSubjectTypeIcons
    and useSubjectCSSClasses if, for unknown reasons, BOTH have been selected.
    There's no real reason to select both... only one can work at a time, 
    and I chose to make the EventType ones take priority.  Go figure.
     

useEventTypeIcons   boolean
listOfEventTypeIcons   lines
  If checked, this will cause the views to choose an icon for each event
    based on the Event Type (portal_type).  The list consists of a lines
    attribute where each line consists of an Event Type and an icon ID, 
    separated by a pipe ( | ) character.  For example: 

       Event|event_icon.gif      where Event is the portal_type.

useEventTypeCSSClasses   boolean
listOfEventTypeCSSClasses   lines
  If checked, this will cause the views to choose a CSS class for each event
    based on the Event Type (portal_type).  The list consists of a lines
    attribute where each line consists of a Subject and a CSS class name, 
    separated by a pipe ( | ) character.  For example: 
    
       AT Event|atevent_class    where AT Event is the portal_type, and 
                                     atevent_class is the CSS class name.



